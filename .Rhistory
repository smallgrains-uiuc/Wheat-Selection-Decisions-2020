br(),
br(),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel= sidebarPanel(
sliderInput("cycdur", label = "Breeding cycle duration",
min = 1,  max = 15, value = 7, step=1),
bsTooltip(id = "cycdur", title = "After making a cross, how many years does it take for a progeny of that cross to become a new parent?",
placement = "bottom", trigger = "hover"),
sliderInput("sliderh2", label = "Heritability",
min = 0,  max = 1, value = .1, step=0.05),
bsTooltip(id = "sliderh2", title = "What is the heritability of the trait or index of traits in the target region?",
placement = "bottom", trigger = "hover"),
sliderInput("sliderNcand", label = "Population size",
min = 10,  max = 1000, value = 200, step=10),
bsTooltip(id = "sliderNcand", title = "How many breeding individuals are phenotyped in multiple environments for the target traits?",
placement = "bottom", trigger = "hover"),
sliderInput("sliderNpar", label = "Number selected",
min = 10,  max = 100, value = 30, step=10),
bsTooltip(id = "sliderNpar", title = "How many parents are selected for crossing?",
placement = "bottom", trigger = "hover"),
sliderInput("sliderNcyc", label = "Number of cycles",
min = 1,  max = 5, value = 1),
numericInput("minVal", label = "Phenotypic distribution minimum value", value = 2),
numericInput("maxVal", label = "Phenotypic distribution maximum value", value = 8)),
# Main panel for displaying outputs ----
mainPanel= mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Expected genetic gain",
br(),
numericInput("rnseed", label = "Replicate", value = 1),
bsTooltip(id = "rnseed", title = "This option allows you to repeat the same breeding process again to see how random chance affects the outcome",
placement = "bottom", trigger = "hover"),
br(),
plotOutput("plot1")),
tabPanel("Variables",
tableOutput("tab")),
tabPanel("Phenotypic values",
plotOutput("plot2")),
tabPanel("Phenotypic value table",
tableOutput("phenos")),
tabPanel("Trend line",
plotOutput("plot3"))
)
)
)
)
server <- function(input, output) {
library(deltaG)
library(ggplot2)
#do analysis reactively
getOutput<- reactive({
Q<- demoSelection(pop0min= input$minVal,
pop0max= input$maxVal, herit= input$sliderh2,
popsize=input$sliderNcand,
numparents= input$sliderNpar,
ncycles= input$sliderNcyc, cycledur=input$cycdur,
rnseed= input$rnseed)
})
##make plot1 reactively
getPlot1<- reactive({
p1<- getOutput()[1]$plt+theme(axis.text=element_text(size=14,face="plain"),
axis.title=element_text(size=16,face="plain"),
legend.text=element_text(size=14,face="plain"),
legend.title=element_text(size=16,face="plain"),
plot.title=element_text(size=16,face="plain"))
p1
})
##make plot2 reactively
getPlot2<- reactive({
p2<- getOutput()[2]$plt2+theme(axis.text=element_text(size=14,face="plain"),
axis.title=element_text(size=16,face="plain"),
legend.text=element_text(size=14,face="plain"),
legend.title=element_text(size=16,face="plain"),
plot.title=element_text(size=16,face="plain"))
p2
})
getPlot3<- reactive({
p3<- getOutput()[5]$plt3+theme(axis.text=element_text(size=14,face="plain"),
axis.title=element_text(size=16,face="plain"),
legend.text=element_text(size=14,face="plain"),
legend.title=element_text(size=16,face="plain"),
plot.title=element_text(size=16,face="plain"))
p3
})
#plot1 output
output$plot1 <- renderPlot({
print(getPlot1())
})
#plot2 output
output$plot2 <- renderPlot({
print(getPlot2())
})
#plot3 output
output$plot3 <- renderPlot({
print(getPlot3())
})
#Make variable table ractively
getSummary<- reactive({
tab<- getOutput()[3]$tab
})
#Make phenos table ractively
getPhenos<- reactive({
phenos<- getOutput()[4]$phenos
})
#variable table output
output$tab <- renderTable({
tab<- getSummary()
return(tab)
}, digits=5)
#Phenos table output
output$phenos <- renderTable({
phenos<- getPhenos()
return(phenos)
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('devtools')
devtools::install_github("jrutUIUC/varietySelector")
devtools::install_github("jrutUIUC/varietySelector")
devtools::install_github("jrutUIUC/varietySelector")
shiny::runApp('Documents/Shiny Variety Selector')
?buildTrialTemplate
??buildTrialTemplate
buildTrialTemplate
library(breedbase)
buildTrialTemplate
sample(c(1:170), replace=TRUE)
unique(sample(c(1:170), replace=TRUE))
e1<- unique(sample(c(1:170), replace=TRUE))
e2<- unique(sample(c(1:170), replace=TRUE))
e3<- unique(sample(c(1:170), replace=TRUE))
e4<- unique(sample(c(1:170), replace=TRUE))
intersect(e1, e2)
length(intersect(e1, e2))
length(intersect(e1, e3))
length(intersect(e1, e4))
length(intersect(e2, e1))
length(intersect(e2, e2))
length(intersect(e2, e3))
length(intersect(e2, e4))
length(intersect(e3, e1))
length(intersect(e3, e2))
length(intersect(e3, e3))
length(intersect(e3, e4))
e1
vec<- c(1:170)
e1<- unique(sample(vec, replace=TRUE))
e2<- unique(sample(vec, replace=TRUE))
e3<- unique(sample(vec, replace=TRUE))
e4<- unique(sample(vec, replace=TRUE))
vec
df<- data.frame(ent=vec)
match(e1, vec)
match(vec, e1)
df[match(vec, e1),]
e1
head(df)
df<- data.frame(ent=vec, e1=NA, e2=NA, e3=NA, e4=NA)
df
match(vec, e1)
e1
match(e1, vec)
df[match(e1, vec),'e1']
df[match(e1, vec),'e1']<- e1
df
vec<- c(1:170)
e1<- unique(sample(vec, replace=TRUE))
e2<- unique(sample(vec, replace=TRUE))
e3<- unique(sample(vec, replace=TRUE))
e4<- unique(sample(vec, replace=TRUE))
df<- data.frame(ent=vec, e1=NA, e2=NA, e3=NA, e4=NA)
df[match(e1, vec),'e1']<- e1
df[match(e2, vec),'e2']<- e2
df[match(e3, vec),'e3']<- e3
df[match(e4, vec),'e4']<- e4
df
?sample
df[,1]
df[,-11]
df2<- df[,-1]
vec<- c(1:170)
e1<- unique(sample(vec, replace=TRUE))
e2<- unique(sample(vec, replace=TRUE))
e3<- unique(sample(vec, replace=TRUE))
e4<- unique(sample(vec, replace=TRUE))
df<- data.frame(ent=vec, e1=0, e2=0, e3=0, e4=0)
df[match(e1, vec),'e1']<- 1
df[match(e2, vec),'e2']<- 1
df[match(e3, vec),'e3']<- 1
df[match(e4, vec),'e4']<- 1
df
sample
?sample
vec<- c(1:170)
e1<- sample(vec, size=30, replace=TRUE)
e2<- sample(vec, size=30, replace=TRUE)
e3<- sample(vec, size=30, replace=TRUE)
e4<- sample(vec, size=30, replace=TRUE)
df<- data.frame(ent=vec, e1=0, e2=0, e3=0, e4=0)
df
df[match(e1, vec),'e1']<- 1
df[match(e2, vec),'e2']<- 1
df[match(e3, vec),'e3']<- 1
df[match(e4, vec),'e4']<- 1
df
vec<- c(1:170)
e1<- sample(vec, size=30, replace=F)
e2<- sample(vec, size=30, replace=F)
e3<- sample(vec, size=30, replace=F)
e4<- sample(vec, size=30, replace=F)
df<- data.frame(ent=vec, e1=0, e2=0, e3=0, e4=0)
df[match(e1, vec),'e1']<- 1
df[match(e2, vec),'e2']<- 1
df[match(e3, vec),'e3']<- 1
df[match(e4, vec),'e4']<- 1
df
vec<- c(1:170)
e1<- sample(vec, size=85, replace=F)
e2<- sample(vec, size=85, replace=F)
e3<- sample(vec, size=85, replace=F)
e4<- sample(vec, size=85, replace=F)
df<- data.frame(ent=vec, e1=0, e2=0, e3=0, e4=0)
df[match(e1, vec),'e1']<- 1
df[match(e2, vec),'e2']<- 1
df[match(e3, vec),'e3']<- 1
df[match(e4, vec),'e4']<- 1
df
170/4
172/4
172+5
173+5
174+5
175+5
175/4
172/4
43+5
172/4
172/8
172/9
172/10
172/11
172/12
172/13
170/13
170/10
170/12
12*14
12*15
vec<- c(1:180)
vec
180
180/12
185/12
vec<- c(1:170)
vec
170/6
170/7
170/8
170/9
170/10
A:J
set=rep(1:10, 17)
set
set<- rep(1:10, 17)
set
set<- sample(rep(1:10, 17))
df<- data.frame(ent=vec, set)
head(df)
uset<- unique(set)
?combn
combn(uset, 2)
10*9
combos<- combn(uset, 2)
combos<- combn(uset, 4)
combos
17/2
set<- sample(rep(1:5, 9))
set
uset<- unique(set)
uset
combos<- combn(uset, 2)
combos
as.vector(combos)
table(as.vector(combos))
170/5
34*2
1170/43
170/43
170/4
set<- sample(rep(1:4, 43))
set
set<- rep(1:4, 43)
set
length(set)
set<- rep(1:4, 43)[vec]
set
set<- sample(set)
uset<- unique(set)
df<- data.frame(ent=vec, set)
combos<- combn(uset, 2)
combos
42*2
combos<- combn(1:4, 2)
combos
combn(1:3, 2)
combos<- combn(1:4, 3)
combos
set
set
df<- data.frame(vec, set)
head(df)
combos
i=1
combos[,i]
which(df$set %in% combos[,i])
df[which(df$set %in% combos[,i]),]
df[which(df$set %in% combos[,i]),'vec']
book<- data.frame(id, env)
id<- df[which(df$set %in% combos[,i]),'vec']
env<- i
book<- data.frame(id, env)
book
for(i in 1:ncol(combos)){
id<- df[which(df$set %in% combos[,i]),'vec']
env<- i
book<- data.frame(id, env)
if(i>1){
books<- rbind(books, book)
}else{
books<- book
}
}
books
order(books[,1])
books[order(books[,1]),]
dim(book)
books<- books[order(books[,1]),]
books[,2]
table(books[,2])
128/170
books
combos
170/2
dim(books)
dim(book)
book[,1]
length(unique(book[,1]))
127*.2
combos
43*3
438+43
43/c(438+43)
43/c(438+43)
43*2
86/c(438+86)
combos
43*4
172/127
100*4
(100*4)/100/3
(65*4)/75/3
(200*4)/200/3
(300*4)/300/3
(100*4)/100/3
(70*4)/70/3
43*4
43*5
(43*5)
(43*5)+311
(311+170)/((43*5)+311)
comvn
combn
43*4
43*3
combn
head(books)
combn
combos
43*3
129+43
172/129
134+48
182/134
170-40
170/4
130/4
32*2
32.5*2
40+65
130*.6666
130/4
130/2
17-/2
170/2
45+65
combos
130/4
311/2
156+65+45
(266+45)/266
156/2
311/4
7+65+45
78+65+45
188+45
233/188
combos
65/2
32+45
77/188
65+45
65*2
65+45
110/188
65/2
33+78
145+110
110+45
110+45+45
200/155
188+78
110/266
110*2
220+45
45+65
45/265
233*4
combos
65/2
78*4
65/2
33*4
78*4
257/222
45+33+33
111/222
224/189
224+33
33*4
78*4
45+33
189*2
78/378
100/.1
install.packages('optiSel')
opticont
library(optiSel)
opticont
library(optiSel)
cont  <- data.frame(
age   = c(   1,    2,    3,    4,    5,    6,    7,   8,    9,    10),
male  = c(0.14, 0.14, 0.09, 0.04, 0.03, 0.03, 0.02, 0.02, 0.01, 0.01),
female= c(0.08, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.02, 0.02))
cont
cont[,2]
sum(cont[,2])
sum(cont[,3])
1/(4*cont$male[1]) + 1/(4*cont$female[1])
cont$male[1]
cont[,2]+cont[,1]
cont[,2]+cont[,3]
cont[,2]*cont[,1]
(cont[,2]*cont[,1]) + (cont[,3]*cont[,1])
1/(cont[,2]*cont[,1]) + (cont[,3]*cont[,1])
mean(1/(cont[,2]*cont[,1]) + (cont[,3]*cont[,1]) )
1/(cont[,2]*cont[,1]) + (cont[,3]*cont[,1])
(cont[,2]*cont[,1]) + (cont[,3]*cont[,1])
1/(cont[,2]*cont[,1]) + 1/(cont[,3]*cont[,1])
(cont[,2]*cont[,1])
cont[,q]
cont[,1]
cont[,1]
(cont[,2]*cont[,1])
mean((cont[,2]*cont[,1]))
q/mean((cont[,2]*cont[,1]))
1/mean((cont[,2]*cont[,1]))
1/mean((cont[,3]*cont[,1]))
4*cont$male[1]
4*cont$female[1]
cont$female[1]
quantile(c(1:10, 0.75))
quantile(c(1:30, 0.75))
c(1:30) >= quantile(c(1:30, 0.75))
which(c(1:30) >= quantile(c(1:30, 0.75)))
c(1:30)[which(c(1:30) >= quantile(c(1:30, 0.75)))]
quantile(c(1:30, 0.75))
c(1:30)>22.5
which(c(1:30)>22.5)
sessionInfo()
library(asreml)
setwd("~/Documents/GitHub/Wheat-Selection-Decisons-2020")
data<- read.csv('All 2018-2020 data as of July 31 2020.csv', as.is=TRUE)
head(data)
grep('Scb', data$studyName)
data[grep('Scb', data$studyName),]
scb<- data[grep('Scb', data$studyName),]
head(scb)
which(scb$studyYear==2020)
scb<- scb[which(scb$studyYear==2020),]
head(scb)
scb$observationUnitName
length(scb$observationUnitName)
grep('Adv|Pr|Aug', scb$studyName)
length(grep('Adv|Pr|Aug', scb$studyName))
length(grep('Adv|Pr|Aug', scb$studyName))/length(scb$observationUnitName)
grep('VT', scb$studyName)
length(grep('VT', scb$studyName))
285/3
16*95
